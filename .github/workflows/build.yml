name: build

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:
    branches:
      - main

permissions:
  contents: write

env:
  GO_VERSION: 1.23

jobs:
  detect-modules:
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.set-modules.outputs.modules }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - id: set-modules
        run: echo "modules=$(go list -m -json | jq -s '.' | jq -c '[.[].Dir]')" >> $GITHUB_OUTPUT
  build-go:
    needs: detect-modules
    runs-on: ubuntu-latest
    strategy:
      matrix:
        modules: ${{ fromJSON(needs.detect-modules.outputs.modules) }}
    services:
      apm-mysql:
        image: mysql:9.0.1
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root
      apm-redis:
        image: redis:7.4.0
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
      - name: Display Go version
        run: go version
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            /go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
      - name: Install dependencies
        run: go get ./...
        working-directory: ${{ matrix.modules }}
      - name: Check code format ${{ matrix.modules }}
        run: gofmt -l .
        working-directory: ${{ matrix.modules }}
      - name: Check the package for errors
        run: go build ./...
        working-directory: ${{ matrix.modules }}
      - name: Wait for MySQL to be ready
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -P 3306 --silent; then
              echo "MySQL is up!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 1
          done
      - name: Initialize database
        run: |
          mysql -h 127.0.0.1 -P 3306 -u root -proot < ./zscripts/setup/init.sql
      - name: Run tests with coverage and race detector
        run: |
          go test -v -race -covermode=atomic -coverpkg=./... -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out
        working-directory: ${{ matrix.modules }}
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          files: coverage.out
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          continue_on_error: true
          verbose: true
          working-directory: ${{ matrix.modules }}
      - name: Get tags info
        id: get_tag_message
        run: git fetch origin +refs/tags/*:refs/tags/*
        if: startsWith(github.ref, 'refs/tags/')
      - name: Generate a changelog
        uses: orhun/git-cliff-action@v3
        id: git-cliff
        if: startsWith(github.ref, 'refs/tags/')
        with:
          config: cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: NEW_CHANGELOG.md
      - name: Prepend tag message and new changelog to existing CHANGELOG.md
        run: |
          cat NEW_CHANGELOG.md
          git fetch origin main:main
          git checkout main
          if [ -f "CHANGELOG.md" ]; then
            head -n 1 CHANGELOG.md > TEMP_CHANGELOG.md
            echo "" >> TEMP_CHANGELOG.md
            cat NEW_CHANGELOG.md >> TEMP_CHANGELOG.md
            tail -n +2 CHANGELOG.md >> TEMP_CHANGELOG.md
            mv TEMP_CHANGELOG.md CHANGELOG.md
          else
            mv NEW_CHANGELOG.md CHANGELOG.md
          fi
          rm -f NEW_CHANGELOG.md
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add CHANGELOG.md
          git commit -m "[skip] Update CHANGELOG.md with new changes"
          git push origin main --force
        if: startsWith(github.ref, 'refs/tags/') && steps.git-cliff.outputs.content != ''
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body: ${{ steps.git-cliff.outputs.content }}
